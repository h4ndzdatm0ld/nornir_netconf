:py:mod:`netconf_lock`
======================

.. py:module:: netconf_lock

.. autoapi-nested-parse::

   NETCONF lock.



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   netconf_lock.netconf_lock



.. py:function:: netconf_lock(task: nornir.core.task.Task, datastore: Optional[str] = 'candidate', manager: Optional[ncclient.manager.Manager] = None, operation: str = 'lock') -> nornir.core.task.Result

   NETCONF locking operations for a specified datastore.

   Task name dynamically updated based on operation of `lock` or `unlock`.

   :param datastore: Target Datastore
   :type datastore: str
   :param manager: Manager to use if operation=='unlock' and the lock is carried.
   :type manager: Manager
   :param operation: Unlock or Lock
   :type operation: str

   .. rubric:: Examples

   Simple example::

       > nr.run(task=netconf_lock)

   Lock candidate datestore::

       > nr.run(task=netconf_lock,
       >        operation="lock",
       >        datastore="candidate")

   Unlock candidate datestore::

       > nr.run(task=netconf_lock,
       >        operation="unlock",
       >        datastore="candidate")

   Unlock candidate datestore with a session::

       > task.run(task=netconf_lock,
       >    operation="unlock",
       >    datastore="candidate",
       >    manager=task.host["manager"])

   :returns:

             Result object with the following attributes set::

                 * result (RpcResult): Rpc and Manager


