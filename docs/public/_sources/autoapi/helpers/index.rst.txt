:py:mod:`helpers`
=================

.. py:module:: helpers

.. autoapi-nested-parse::

   Helper Functions.



Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   general/index.rst
   rpc_helpers/index.rst


Package Contents
----------------


Functions
~~~~~~~~~

.. autoapisummary::

   helpers.check_file
   helpers.create_folder
   helpers.write_output
   helpers.get_result
   helpers.unpack_rpc
   helpers.xml_to_dict
   helpers.check_capability



.. py:function:: check_file(file_name: str) -> bool

   Check file_name exists based on input.

   Args:
       file_name (str): file name to check


.. py:function:: create_folder(directory: str) -> None

   Create a directory.

   Args:
       directory (str): Directory path to create


.. py:function:: write_output(text: str, path: str, filename: str) -> None

   Take input and path and write a file.

   Args:
       text (str): text to write
       path (str): directory path
       filename (str): filename


.. py:function:: get_result(rpc: Union[ncclient.operations.rpc.RPCReply, Dict[str, Any]], xmldict: bool = False) -> Dict[str, Union[ncclient.operations.rpc.RPCReply, str]]

   Check if RPC reply is valid and unpack.

   Args:
       rpc (Union[RPCReply, Dict]): RPC Reply from Netconf Server or Dict
       xmldict (boolean): convert xml to dict

   Returns:
       Dict: Results dict to expand in Result object


.. py:function:: unpack_rpc(rpc: ncclient.operations.rpc.RPCReply, xmldict: bool = False) -> Dict[str, Union[ncclient.operations.rpc.RPCReply, str]]

   Extract RPC attrs of interest.

   Args:
       rpc (RPCReply): RPC Reply from Netconf Server
       xmldict (boolean): convert xml to dict

   Return:
       Dict: "RPC Attributes"


.. py:function:: xml_to_dict(rpc: ncclient.operations.rpc.RPCReply) -> Union[Any, Dict[str, str]]

   Convert XML from RPC reply to dict.

   Args:
       rpc (RPCReply): RPC Reply from Netconf Server

   Returns:
       Dict: xml response -> Dict


.. py:function:: check_capability(capabilities: List[str], capability: str) -> bool

   Evaluate capabilities and return True if capability is available.


